"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    showRegister({ view }) {
        return view.render('auth/register');
    }
    async register({ request, auth, response }) {
        const validationSchema = Validator_1.schema.create({
            name: Validator_1.schema.string({ trim: true }),
            email: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.email(),
                Validator_1.rules.maxLength(50),
                Validator_1.rules.unique({ table: 'users', column: 'email' })
            ]),
            password: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.confirmed(),
            ])
        });
        const validatedData = await request.validate({
            schema: validationSchema,
        });
        const user = await User_1.default.create(validatedData);
        await auth.login(user);
        return response.redirect('/');
    }
    async logout({ auth, response }) {
        await auth.logout();
        return response.redirect('/login');
    }
    async showLogin({ view }) {
        return view.render('auth/login');
    }
    async login({ request, auth, session, response }) {
        const { email, password } = request.all();
        try {
            await auth.attempt(email, password);
            return response.redirect('/');
        }
        catch (error) {
            session.flash('notification', 'we can not verify yours credentials.');
            return response.redirect('back');
        }
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLDJFQUEwRDtBQUMxRCxpRkFBa0M7QUFFbEMsTUFBcUIsY0FBYztJQUMxQixZQUFZLENBQUMsRUFBRSxJQUFJLEVBQXVCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUF1QjtRQUNwRSxNQUFNLGdCQUFnQixHQUFHLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3JDLElBQUksRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNuQyxLQUFLLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ25DLGlCQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNiLGlCQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztnQkFDbkIsaUJBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUNsRCxDQUFDO1lBQ0YsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN0QyxpQkFBSyxDQUFDLFNBQVMsRUFBRTthQUNsQixDQUFDO1NBQ0gsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxhQUFhLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQzNDLE1BQU0sRUFBRSxnQkFBZ0I7U0FDekIsQ0FBQyxDQUFBO1FBRUYsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRTdDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUV0QixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUF1QjtRQUN6RCxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNuQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQXVCO1FBQ2xELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDMUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDekMsSUFBSTtZQUNGLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUE7WUFDbkMsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFBO1lBQ3JFLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNqQztJQUNILENBQUM7Q0FFRjtBQS9DRCxpQ0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuLy9pbXBvcnQgVGFzayBmcm9tICdBcHAvTW9kZWxzL1Rhc2snXG5pbXBvcnQgeyBzY2hlbWEsIHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhDb250cm9sbGVyIHtcbiAgcHVibGljIHNob3dSZWdpc3Rlcih7IHZpZXcgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIHJldHVybiB2aWV3LnJlbmRlcignYXV0aC9yZWdpc3RlcicpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoeyByZXF1ZXN0LCBhdXRoLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgbmFtZTogc2NoZW1hLnN0cmluZyh7IHRyaW06IHRydWUgfSksXG4gICAgICBlbWFpbDogc2NoZW1hLnN0cmluZyh7IHRyaW06IHRydWUgfSwgW1xuICAgICAgICBydWxlcy5lbWFpbCgpLFxuICAgICAgICBydWxlcy5tYXhMZW5ndGgoNTApLFxuICAgICAgICBydWxlcy51bmlxdWUoeyB0YWJsZTogJ3VzZXJzJywgY29sdW1uOiAnZW1haWwnIH0pXG4gICAgICBdKSxcbiAgICAgIHBhc3N3b3JkOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICAgIHJ1bGVzLmNvbmZpcm1lZCgpLFxuICAgICAgXSlcbiAgICB9KVxuICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHtcbiAgICAgIHNjaGVtYTogdmFsaWRhdGlvblNjaGVtYSxcbiAgICB9KVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHZhbGlkYXRlZERhdGEpXG5cbiAgICBhd2FpdCBhdXRoLmxvZ2luKHVzZXIpXG5cbiAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJy8nKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvZ291dCh7IGF1dGgsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBhd2FpdCBhdXRoLmxvZ291dCgpXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCcvbG9naW4nKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3dMb2dpbih7IHZpZXcgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIHJldHVybiB2aWV3LnJlbmRlcignYXV0aC9sb2dpbicpXG4gIH1cbiAgcHVibGljIGFzeW5jIGxvZ2luKHsgcmVxdWVzdCwgYXV0aCwgc2Vzc2lvbiwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSByZXF1ZXN0LmFsbCgpXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGF1dGguYXR0ZW1wdChlbWFpbCwgcGFzc3dvcmQpXG4gICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJy8nKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzZXNzaW9uLmZsYXNoKCdub3RpZmljYXRpb24nLCAnd2UgY2FuIG5vdCB2ZXJpZnkgeW91cnMgY3JlZGVudGlhbHMuJylcbiAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnYmFjaycpXG4gICAgfVxuICB9XG5cbn1cbiJdfQ==