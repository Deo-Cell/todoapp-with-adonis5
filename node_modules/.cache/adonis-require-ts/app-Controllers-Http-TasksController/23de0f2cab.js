"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Task_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Task"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class TasksController {
    async index({ view, auth }) {
        const user = auth.user;
        await user?.load('tasks');
        return view.render('tasks/index', { task: user?.tasks });
    }
    async store({ request, response, session, auth }) {
        const validationSchema = Validator_1.schema.create({
            title: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.maxLength(25)
            ])
        });
        const validatedData = await request.validate({
            schema: validationSchema,
            messages: {
                'title.required': 'Enter task title',
                'title.maxLenght': 'Task title can not exceed 25 characters'
            },
        });
        await auth.user?.related('tasks').create({
            title: validatedData.title,
        });
        session.flash('notifi cation', 'Task added!');
        return response.redirect('back');
    }
    async update({ request, response, session, params }) {
        const task = await Task_1.default.findOrFail(params.id);
        task.is_completed = !!request.input('completed');
        await task.save();
        session.flash('notification', 'Task completed');
        return response.redirect('back');
    }
    async destroy({ params, session, response }) {
        const task = await Task_1.default.findOrFail(params.id);
        await task.delete();
        session.flash('notification', 'Task deleted');
        return response.redirect('back');
    }
}
exports.default = TasksController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGFza3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLDJFQUEwRDtBQUUxRCxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUF1QjtRQUVsRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1FBQ3RCLE1BQU0sSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN6QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQzVELENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUF1QjtRQUN4RSxNQUFNLGdCQUFnQixHQUFHLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25DLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDakMsaUJBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO2FBQ3RCLENBQUM7U0FDTCxDQUFDLENBQUE7UUFFRixNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDekMsTUFBTSxFQUFFLGdCQUFnQjtZQUN4QixRQUFRLEVBQUU7Z0JBQ04sZ0JBQWdCLEVBQUUsa0JBQWtCO2dCQUNwQyxpQkFBaUIsRUFBRSx5Q0FBeUM7YUFDL0Q7U0FDSixDQUFDLENBQUE7UUFDRixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNyQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7U0FFN0IsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUE7UUFDN0MsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUF1QjtRQUMzRSxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDaEQsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtRQUUvQyxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDbkUsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM3QyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNuQixPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQTtRQUU3QyxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEMsQ0FBQztDQUNKO0FBN0NELGtDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgVGFzayBmcm9tICdBcHAvTW9kZWxzL1Rhc2snXG5pbXBvcnQgeyBzY2hlbWEsIHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tzQ29udHJvbGxlciB7XG4gICAgcHVibGljIGFzeW5jIGluZGV4KHsgdmlldywgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIC8vY29uc3QgdGFzayA9IGF3YWl0IFRhc2suYWxsKClcbiAgICAgICAgY29uc3QgdXNlciA9IGF1dGgudXNlclxuICAgICAgICBhd2FpdCB1c2VyPy5sb2FkKCd0YXNrcycpXG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcigndGFza3MvaW5kZXgnLCB7IHRhc2s6IHVzZXI/LnRhc2tzIH0pXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBzdG9yZSh7IHJlcXVlc3QsIHJlc3BvbnNlLCBzZXNzaW9uLCBhdXRoIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgICAgICAgdGl0bGU6IHNjaGVtYS5zdHJpbmcoeyB0cmltOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgICBydWxlcy5tYXhMZW5ndGgoMjUpXG4gICAgICAgICAgICBdKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHtcbiAgICAgICAgICAgIHNjaGVtYTogdmFsaWRhdGlvblNjaGVtYSxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICAgICAgJ3RpdGxlLnJlcXVpcmVkJzogJ0VudGVyIHRhc2sgdGl0bGUnLFxuICAgICAgICAgICAgICAgICd0aXRsZS5tYXhMZW5naHQnOiAnVGFzayB0aXRsZSBjYW4gbm90IGV4Y2VlZCAyNSBjaGFyYWN0ZXJzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgYXdhaXQgYXV0aC51c2VyPy5yZWxhdGVkKCd0YXNrcycpLmNyZWF0ZSh7XG4gICAgICAgICAgICB0aXRsZTogdmFsaWRhdGVkRGF0YS50aXRsZSxcblxuICAgICAgICB9KVxuICAgICAgICBzZXNzaW9uLmZsYXNoKCdub3RpZmkgY2F0aW9uJywgJ1Rhc2sgYWRkZWQhJylcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCdiYWNrJylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKHsgcmVxdWVzdCwgcmVzcG9uc2UsIHNlc3Npb24sIHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBhd2FpdCBUYXNrLmZpbmRPckZhaWwocGFyYW1zLmlkKVxuICAgICAgICB0YXNrLmlzX2NvbXBsZXRlZCA9ICEhcmVxdWVzdC5pbnB1dCgnY29tcGxldGVkJylcbiAgICAgICAgYXdhaXQgdGFzay5zYXZlKClcbiAgICAgICAgc2Vzc2lvbi5mbGFzaCgnbm90aWZpY2F0aW9uJywgJ1Rhc2sgY29tcGxldGVkJylcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJ2JhY2snKVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkZXN0cm95KHsgcGFyYW1zLCBzZXNzaW9uLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBhd2FpdCBUYXNrLmZpbmRPckZhaWwocGFyYW1zLmlkKVxuICAgICAgICBhd2FpdCB0YXNrLmRlbGV0ZSgpXG4gICAgICAgIHNlc3Npb24uZmxhc2goJ25vdGlmaWNhdGlvbicsICdUYXNrIGRlbGV0ZWQnKVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnYmFjaycpXG4gICAgfVxufVxuIl19